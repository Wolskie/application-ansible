flush ruleset

table ip crowdsec {
    set crowdsec-blacklists {
        type ipv4_addr
        flags timeout
    }

    chain crowdsec-chain {
        type filter hook input priority filter; policy accept;
        ip saddr @crowdsec-blacklists drop
    }
}
table ip6 crowdsec6 {
    set crowdsec6-blacklists {
        type ipv6_addr
        flags timeout
    }

    chain crowdsec6-chain {
        type filter hook input priority filter; policy accept;
        ip6 saddr @crowdsec6-blacklists drop
    }
}

# a common table for both IPv4 and IPv6
table inet nftables_svc {

	# protocols to allow
	set allowed_protocols {
		type inet_proto
		elements = { icmp, icmpv6 }
	}

	# interfaces to accept any traffic on
	set allowed_interfaces {
		type ifname
		elements = { "lo" }
	}

	# services to allow
	set allowed_tcp_dports {
		type inet_service
		elements = { 22, 53 }
	}

	set allowed_udp_dports {
		type inet_service
		elements = { 53 }
	}

	# this chain gathers all accept conditions
	chain allow {
		ct state established,related accept

		meta l4proto @allowed_protocols accept
		iifname @allowed_interfaces accept
		tcp dport @allowed_tcp_dports accept
		udp dport @allowed_udp_dports accept
	}

	# base-chain for traffic to this host
	chain INPUT {
		type filter hook input priority filter + 20
		policy accept

		jump allow
		reject with icmpx type port-unreachable
	}
}
